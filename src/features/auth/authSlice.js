import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { auth, provider } from "../../config/firebase";

const initialState = {
  user: {},
  status: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
    signUser: (state, action) => {
      if (!state.status) {
        state.user = {
          uid: action.payload.uid,
          displayName: action.payload.displayName,
          email: action.payload.email,
          phoneNumber: action.payload.phoneNumber,
          photoURL: action.payload.photoURL,
          creationTime: action.payload.metadata.creationTime,
          lastSignInTime: action.payload.metadata.lastSignInTime,
        };
        state.status = true;
        // console.log(action.payload);
      }
    },
    fogetPassword: (state, action) => {
      //not yet
    },
    signUp: (state, action) => {
      //not yet
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { getUser, signUser, fogetPassword, signUp } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default userSlice.reducer;
